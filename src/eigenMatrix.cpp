#include <iostream>
using namespace std;
#include <ctime>
// Eigen libraries
#include <Eigen/Core>
// Algebraic operations on dense matrices (inverse, eigenvalues, etc.)
#include <Eigen/Dense>

#define MATRIX_SIZE 50

/****************************
* Basic usage of Eigen matrix
****************************/

int main( int argc, char** argv )
{
    // All vectors and matrices in Eigen are Eigen::Matrix, which is a template class. 
    //Its first three parameters are: data type, row, column
    // Declare a 2*3 float matrix
    Eigen::Matrix<float, 2, 3> matrix_23;

    // At the same time, Eigen provides many built-in types through typedef, 
    // but the bottom layer is still Eigen::Matrix
    // For example, Vector3d is essentially Eigen::Matrix<double, 3, 1>, 
    // which is a three-dimensional vector
    Eigen::Vector3d v_3d;
	// Same as 
    Eigen::Matrix<float,3,1> vd_3d;

    // Matrix3d is essentially Eigen::Matrix<double, 3, 3>
    Eigen::Matrix3d matrix_33 = Eigen::Matrix3d::Zero(); //Initialized to zero
    // If you are not sure about the size of the matrix
    // you can use a dynamically sized matrix
    Eigen::Matrix< double, Eigen::Dynamic, Eigen::Dynamic > matrix_dynamic;
    // Simple format for unknown size
    Eigen::MatrixXd matrix_x;
    // Check other type of dynamic matrix

    // The following is the operation of the Eigen array
     // Input data (initialization) 
    matrix_23 << 1, 2, 3, 4, 5, 6;
    // Output
    cout << matrix_23 << endl;

    // Use () to access the elements in the matrix
    for (int i=0; i<2; i++) 
    {
        for (int j=0; j<3; j++)cout<<matrix_23(i,j)<<"\t";cout<<endl;
    }

    // Multiply matrix and vector (actually it is still matrix and matrix)
    v_3d << 3, 2, 1;
    vd_3d << 4,5,6;
    // But in Eigen you cannot mix two different types of matrices, like this is wrong
    // Eigen::Matrix<double, 2, 1> result_wrong_type = matrix_23 * v_3d;
    // should be explicitly converted
    Eigen::Matrix<double, 2, 1> result = matrix_23.cast<double>() * v_3d;
    cout << result << endl;

    Eigen::Matrix<float, 2, 1> result2 = matrix_23 * vd_3d;
    cout << result2 << endl;

    // Similarly you can't make a mistake about the dimensions of the matrix
    // Try to cancel the comment below and see what error Eigen will report
    // Eigen::Matrix<double, 2, 3> result_wrong_dimension = matrix_23.cast<double>() * v_3d;

    // some matrix operations
    // The four arithmetic operations will not be demonstrated, just use +-*/.ã€‚
    matrix_33 = Eigen::Matrix3d::Random();      // Random number matrix
    cout << matrix_33 << endl << endl;

    cout << matrix_33.transpose() << endl;      // Transpose
    cout << matrix_33.sum() << endl;            // Sum
    cout << matrix_33.trace() << endl;          // Trace
    cout << 10*matrix_33 << endl;               // Multiplication
    cout << matrix_33.inverse() << endl;        // Inverse
    cout << matrix_33.determinant() << endl;    // Determinant

    // Eigenvalues
    // Real symmetric matrix can ensure the success of diagonalization
    Eigen::SelfAdjointEigenSolver<Eigen::Matrix3d> eigen_solver ( matrix_33.transpose()*matrix_33 );
    cout << "Eigen values = \n" << eigen_solver.eigenvalues() << endl;
    cout << "Eigen vectors = \n" << eigen_solver.eigenvectors() << endl;

    // Solving equations
    // We solve the equation matrix_NN * x = v_Nd
    // The size of N is defined in the previous macro, it is generated by a random number
    // Direct inversion is naturally the most straightforward, but the amount of inversion calculations is large

    Eigen::Matrix< double, MATRIX_SIZE, MATRIX_SIZE > matrix_NN;
    matrix_NN = Eigen::MatrixXd::Random( MATRIX_SIZE, MATRIX_SIZE );
    Eigen::Matrix< double, MATRIX_SIZE,  1> v_Nd;
    v_Nd = Eigen::MatrixXd::Random( MATRIX_SIZE,1 );

    clock_t time_stt = clock(); // timer
    // take inverse
    Eigen::Matrix<double,MATRIX_SIZE,1> x = matrix_NN.inverse()*v_Nd;
    cout <<"time use in normal inverse is " << 1000* (clock() - time_stt)/(double)CLOCKS_PER_SEC << "ms"<< endl;
    
	// qr decomposition
    time_stt = clock();
    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);
    cout <<"time use in Qr decomposition is " <<1000*  (clock() - time_stt)/(double)CLOCKS_PER_SEC <<"ms" << endl;

    return 0;
}
